"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolarWeek = void 0;
var SolarUtil_1 = require("./SolarUtil");
var Solar_1 = require("./Solar");
var ExactDate_1 = require("./ExactDate");
var SolarWeek = (function () {
    function SolarWeek(year, month, day, start) {
        this._year = year;
        this._month = month;
        this._day = day;
        this._start = start;
        this._calendar = ExactDate_1.ExactDate.fromYmd(year, month, day);
    }
    SolarWeek.fromYmd = function (year, month, day, start) {
        return new SolarWeek(year, month, day, start);
    };
    SolarWeek.fromDate = function (date, start) {
        return SolarWeek.fromYmd(date.getFullYear(), date.getMonth() + 1, date.getDate(), start);
    };
    SolarWeek.prototype.getYear = function () {
        return this._year;
    };
    SolarWeek.prototype.getMonth = function () {
        return this._month;
    };
    SolarWeek.prototype.getDay = function () {
        return this._day;
    };
    SolarWeek.prototype.getStart = function () {
        return this._start;
    };
    SolarWeek.prototype.getIndex = function () {
        var firstDate = ExactDate_1.ExactDate.fromYmd(this._year, this._month, 1);
        var firstDayWeek = firstDate.getDay();
        var offset = firstDayWeek - this._start;
        if (offset < 0) {
            offset += 7;
        }
        return Math.ceil((this._day + offset) / 7);
    };
    SolarWeek.prototype.getIndexInYear = function () {
        var firstDate = ExactDate_1.ExactDate.fromYmd(this._year, 1, 1);
        var firstDayWeek = firstDate.getDay();
        var offset = firstDayWeek - this._start;
        if (offset < 0) {
            offset += 7;
        }
        return Math.ceil((SolarUtil_1.SolarUtil.getDaysInYear(this._year, this._month, this._day) + offset) / 7);
    };
    SolarWeek.prototype.next = function (weeks, separateMonth) {
        if (0 === weeks) {
            return SolarWeek.fromYmd(this._year, this._month, this._day, this._start);
        }
        var date;
        if (separateMonth) {
            var n = weeks;
            date = ExactDate_1.ExactDate.fromYmd(this._year, this._month, this._day);
            var week = SolarWeek.fromDate(date, this._start);
            var month = this._month;
            var plus = n > 0;
            while (0 !== n) {
                date.setDate(date.getDate() + (plus ? 7 : -7));
                week = SolarWeek.fromDate(date, this._start);
                var weekMonth = week.getMonth();
                if (month !== weekMonth) {
                    var index = week.getIndex();
                    if (plus) {
                        if (1 === index) {
                            var firstDay = week.getFirstDay();
                            week = SolarWeek.fromYmd(firstDay.getYear(), firstDay.getMonth(), firstDay.getDay(), this._start);
                            weekMonth = week.getMonth();
                        }
                        else {
                            date = ExactDate_1.ExactDate.fromYmd(week.getYear(), week.getMonth(), 1);
                            week = SolarWeek.fromDate(date, this._start);
                        }
                    }
                    else {
                        var size = SolarUtil_1.SolarUtil.getWeeksOfMonth(week.getYear(), week.getMonth(), this._start);
                        if (size === index) {
                            var lastDay = week.getFirstDay().next(6);
                            week = SolarWeek.fromYmd(lastDay.getYear(), lastDay.getMonth(), lastDay.getDay(), this._start);
                            weekMonth = week.getMonth();
                        }
                        else {
                            date = ExactDate_1.ExactDate.fromYmd(week.getYear(), week.getMonth(), SolarUtil_1.SolarUtil.getDaysOfMonth(week.getYear(), week.getMonth()));
                            week = SolarWeek.fromDate(date, this._start);
                        }
                    }
                    month = weekMonth;
                }
                n -= plus ? 1 : -1;
            }
            return week;
        }
        else {
            date = ExactDate_1.ExactDate.fromYmd(this._year, this._month, this._day);
            date.setDate(date.getDate() + weeks * 7);
            return SolarWeek.fromDate(date, this._start);
        }
    };
    SolarWeek.prototype.getFirstDay = function () {
        var date = ExactDate_1.ExactDate.fromYmd(this._year, this._month, this._day);
        var prev = date.getDay() - this._start;
        if (prev < 0) {
            prev += 7;
        }
        date.setDate(date.getDate() - prev);
        return Solar_1.Solar.fromDate(date);
    };
    SolarWeek.prototype.getFirstDayInMonth = function () {
        var index = 0;
        var days = this.getDays();
        for (var i = 0; i < days.length; i++) {
            if (this._month === days[i].getMonth()) {
                index = i;
                break;
            }
        }
        return days[index];
    };
    SolarWeek.prototype.getDays = function () {
        var firstDay = this.getFirstDay();
        var l = [];
        l.push(firstDay);
        for (var i = 1; i < 7; i++) {
            l.push(firstDay.next(i));
        }
        return l;
    };
    SolarWeek.prototype.getDaysInMonth = function () {
        var days = this.getDays();
        var l = [];
        for (var i = 0; i < days.length; i++) {
            var day = days[i];
            if (this._month !== day.getMonth()) {
                continue;
            }
            l.push(day);
        }
        return l;
    };
    SolarWeek.prototype.toString = function () {
        return "".concat(this.getYear(), ".").concat(this.getMonth(), ".").concat(this.getIndex());
    };
    SolarWeek.prototype.toFullString = function () {
        return "".concat(this.getYear(), "\u5E74").concat(this.getMonth(), "\u6708\u7B2C").concat(this.getIndex(), "\u5468");
    };
    return SolarWeek;
}());
exports.SolarWeek = SolarWeek;
//# sourceMappingURL=SolarWeek.js.map