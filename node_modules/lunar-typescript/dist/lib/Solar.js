"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Solar = void 0;
var SolarUtil_1 = require("./SolarUtil");
var SolarWeek_1 = require("./SolarWeek");
var LunarUtil_1 = require("./LunarUtil");
var HolidayUtil_1 = require("./HolidayUtil");
var Lunar_1 = require("./Lunar");
var ExactDate_1 = require("./ExactDate");
var Solar = (function () {
    function Solar(year, month, day, hour, minute, second) {
        if (year === 1582 && month === 10) {
            if (day >= 15) {
                day -= 10;
            }
        }
        this._year = year;
        this._month = month;
        this._day = day;
        this._hour = hour;
        this._minute = minute;
        this._second = second;
        this._calendar = ExactDate_1.ExactDate.fromYmdHms(year, month, day, hour, minute, second);
    }
    Solar.fromYmd = function (year, month, day) {
        return Solar.fromYmdHms(year, month, day, 0, 0, 0);
    };
    Solar.fromYmdHms = function (year, month, day, hour, minute, second) {
        return new Solar(year, month, day, hour, minute, second);
    };
    Solar.fromDate = function (date) {
        return Solar.fromYmdHms(date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
    };
    Solar.fromJulianDay = function (julianDay) {
        var d = Math.floor(julianDay + 0.5);
        var f = julianDay + 0.5 - d;
        var c;
        if (d >= 2299161) {
            c = Math.floor((d - 1867216.25) / 36524.25);
            d += 1 + c - Math.floor(c / 4);
        }
        d += 1524;
        var year = Math.floor((d - 122.1) / 365.25);
        d -= Math.floor(365.25 * year);
        var month = Math.floor(d / 30.601);
        d -= Math.floor(30.601 * month);
        var day = d;
        if (month > 13) {
            month -= 13;
            year -= 4715;
        }
        else {
            month -= 1;
            year -= 4716;
        }
        f *= 24;
        var hour = Math.floor(f);
        f -= hour;
        f *= 60;
        var minute = Math.floor(f);
        f -= minute;
        f *= 60;
        var second = Math.round(f);
        if (second > 59) {
            second -= 60;
            minute++;
        }
        if (minute > 59) {
            minute -= 60;
            hour++;
        }
        return Solar.fromYmdHms(year, month, day, hour, minute, second);
    };
    Solar.fromBaZi = function (yearGanZhi, monthGanZhi, dayGanZhi, timeGanZhi, sect, baseYear) {
        if (sect === void 0) { sect = 2; }
        if (baseYear === void 0) { baseYear = 1900; }
        sect = (1 == sect) ? 1 : 2;
        var l = [];
        var today = Solar.fromDate(new Date());
        var lunar = today.getLunar();
        var offsetYear = LunarUtil_1.LunarUtil.getJiaZiIndex(lunar.getYearInGanZhiExact()) - LunarUtil_1.LunarUtil.getJiaZiIndex(yearGanZhi);
        if (offsetYear < 0) {
            offsetYear = offsetYear + 60;
        }
        var startYear = lunar.getYear() - offsetYear;
        var hour = 0;
        var timeZhi = timeGanZhi.substr(1);
        for (var i = 0, j = LunarUtil_1.LunarUtil.ZHI.length; i < j; i++) {
            if (LunarUtil_1.LunarUtil.ZHI[i] === timeZhi) {
                hour = (i - 1) * 2;
            }
        }
        while (startYear >= baseYear) {
            var year = startYear - 1;
            var counter = 0;
            var month = 12;
            var day = void 0;
            var solar = void 0;
            var found = false;
            while (counter < 15) {
                if (year >= baseYear) {
                    day = 1;
                    solar = Solar.fromYmdHms(year, month, day, hour, 0, 0);
                    lunar = solar.getLunar();
                    if (lunar.getYearInGanZhiExact() === yearGanZhi && lunar.getMonthInGanZhiExact() === monthGanZhi) {
                        found = true;
                        break;
                    }
                }
                month++;
                if (month > 12) {
                    month = 1;
                    year++;
                }
                counter++;
            }
            if (found) {
                counter = 0;
                month--;
                if (month < 1) {
                    month = 12;
                    year--;
                }
                day = 1;
                solar = Solar.fromYmdHms(year, month, day, hour, 0, 0);
                while (counter < 61) {
                    lunar = solar.getLunar();
                    var dgz = (2 == sect) ? lunar.getDayInGanZhiExact2() : lunar.getDayInGanZhiExact();
                    if (lunar.getYearInGanZhiExact() === yearGanZhi && lunar.getMonthInGanZhiExact() === monthGanZhi && dgz === dayGanZhi && lunar.getTimeInGanZhi() === timeGanZhi) {
                        l.push(solar);
                        break;
                    }
                    solar = solar.next(1);
                    counter++;
                }
            }
            startYear -= 60;
        }
        return l;
    };
    Solar.prototype.getYear = function () {
        return this._year;
    };
    Solar.prototype.getMonth = function () {
        return this._month;
    };
    Solar.prototype.getDay = function () {
        return this._day;
    };
    Solar.prototype.getHour = function () {
        return this._hour;
    };
    Solar.prototype.getMinute = function () {
        return this._minute;
    };
    Solar.prototype.getSecond = function () {
        return this._second;
    };
    Solar.prototype.getWeek = function () {
        return this._calendar.getDay();
    };
    Solar.prototype.getWeekInChinese = function () {
        return SolarUtil_1.SolarUtil.WEEK[this.getWeek()];
    };
    Solar.prototype.getSolarWeek = function (start) {
        return SolarWeek_1.SolarWeek.fromDate(this._calendar, start);
    };
    Solar.prototype.isLeapYear = function () {
        return SolarUtil_1.SolarUtil.isLeapYear(this._year);
    };
    Solar.prototype.getFestivals = function () {
        var l = [];
        var f = SolarUtil_1.SolarUtil.FESTIVAL.get(this._month + '-' + this._day);
        if (f) {
            l.push(f);
        }
        var weeks = Math.ceil(this._day / 7);
        var week = this.getWeek();
        f = SolarUtil_1.SolarUtil.WEEK_FESTIVAL.get(this._month + '-' + weeks + '-' + week);
        if (f) {
            l.push(f);
        }
        if (this._day + 7 > SolarUtil_1.SolarUtil.getDaysOfMonth(this._year, this._month)) {
            f = SolarUtil_1.SolarUtil.WEEK_FESTIVAL.get(this._month + '-0-' + week);
            if (f) {
                l.push(f);
            }
        }
        return l;
    };
    Solar.prototype.getOtherFestivals = function () {
        var l = [];
        var fs = SolarUtil_1.SolarUtil.OTHER_FESTIVAL.get(this._month + '-' + this._day);
        if (fs) {
            fs.forEach(function (f) {
                l.push(f);
            });
        }
        return l;
    };
    Solar.prototype.getXingzuo = function () {
        return this.getXingZuo();
    };
    Solar.prototype.getXingZuo = function () {
        var index = 11;
        var y = this._month * 100 + this._day;
        if (y >= 321 && y <= 419) {
            index = 0;
        }
        else if (y >= 420 && y <= 520) {
            index = 1;
        }
        else if (y >= 521 && y <= 621) {
            index = 2;
        }
        else if (y >= 622 && y <= 722) {
            index = 3;
        }
        else if (y >= 723 && y <= 822) {
            index = 4;
        }
        else if (y >= 823 && y <= 922) {
            index = 5;
        }
        else if (y >= 923 && y <= 1023) {
            index = 6;
        }
        else if (y >= 1024 && y <= 1122) {
            index = 7;
        }
        else if (y >= 1123 && y <= 1221) {
            index = 8;
        }
        else if (y >= 1222 || y <= 119) {
            index = 9;
        }
        else if (y <= 218) {
            index = 10;
        }
        return SolarUtil_1.SolarUtil.XINGZUO[index];
    };
    Solar.prototype.toYmd = function () {
        var d = this._day;
        if (this._year === 1582 && this._month == 10) {
            if (d >= 5) {
                d += 10;
            }
        }
        var y = this._year + '';
        while (y.length < 4) {
            y = '0' + y;
        }
        return [y, (this._month < 10 ? '0' : '') + this._month, (d < 10 ? '0' : '') + d].join('-');
    };
    Solar.prototype.toYmdHms = function () {
        return this.toYmd() + ' ' + [(this._hour < 10 ? '0' : '') + this._hour, (this._minute < 10 ? '0' : '') + this._minute, (this._second < 10 ? '0' : '') + this._second].join(':');
    };
    Solar.prototype.toString = function () {
        return this.toYmd();
    };
    Solar.prototype.toFullString = function () {
        var s = this.toYmdHms();
        if (this.isLeapYear()) {
            s += ' 闰年';
        }
        s += ' 星期' + this.getWeekInChinese();
        var festivals = this.getFestivals();
        festivals.forEach(function (f) {
            s += ' (' + f + ')';
        });
        s += ' ' + this.getXingZuo() + '座';
        return s;
    };
    Solar.prototype.next = function (days, onlyWorkday) {
        if (onlyWorkday === void 0) { onlyWorkday = false; }
        var date = ExactDate_1.ExactDate.fromYmdHms(this._year, this._month, this._day, this._hour, this._minute, this._second);
        if (0 != days) {
            if (!onlyWorkday) {
                date.setDate(date.getDate() + days);
            }
            else {
                var rest = Math.abs(days);
                var add = days < 1 ? -1 : 1;
                while (rest > 0) {
                    date.setDate(date.getDate() + add);
                    var work = true;
                    var holiday = HolidayUtil_1.HolidayUtil.getHoliday(date.getFullYear(), date.getMonth() + 1, date.getDate());
                    if (!holiday) {
                        var week = date.getDay();
                        if (0 == week || 6 == week) {
                            work = false;
                        }
                    }
                    else {
                        work = holiday.isWork();
                    }
                    if (work) {
                        rest--;
                    }
                }
            }
        }
        return Solar.fromDate(date);
    };
    Solar.prototype.getLunar = function () {
        return Lunar_1.Lunar.fromDate(this._calendar);
    };
    Solar.prototype.getJulianDay = function () {
        var y = this._year;
        var m = this._month;
        var d = this._day + ((this._second / 60 + this._minute) / 60 + this._hour) / 24;
        var n = 0;
        var g = false;
        if (y * 372 + m * 31 + Math.floor(d) >= 588829) {
            g = true;
        }
        if (m <= 2) {
            m += 12;
            y--;
        }
        if (g) {
            n = Math.floor(y / 100);
            n = 2 - n + Math.floor(n / 4);
        }
        return Math.floor(365.25 * (y + 4716)) + Math.floor(30.6001 * (m + 1)) + d + n - 1524.5;
    };
    Solar.prototype.getCalendar = function () {
        return this._calendar;
    };
    Solar.J2000 = 2451545;
    return Solar;
}());
exports.Solar = Solar;
//# sourceMappingURL=Solar.js.map